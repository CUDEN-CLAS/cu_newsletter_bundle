<?php
/**
 * @file
 * Code for the Newsletter feature.
 */

include_once 'cu_newsletter.features.inc';

function cu_newsletter_menu() {
  $items = array();

  $items['node/%node/email']['theme callback'] = 'cu_newsletter_email_node_theme';
  $items['node/%node/email']['theme arguments'] = array(1);
  $items['node/%node/email']['access callback'] = TRUE;
  $items['node/%node/email']['title'] = t('Email Version');

  return $items;
}

/**
* Implements hook_menu_alter().
*/
function cu_newsletter_menu_alter(&$items) {

}

function cu_newsletter_access($op, $node) {
  if ($node->type == 'newsletter') {
    return TRUE;
  }
  if (node_access($op, $node)) {
    return TRUE;
  }
  else {
    return TRUE;
  }
}

/**
* For editing page nodes, uses the 'some_other_theme' theme.
*/
function cu_newsletter_email_node_theme($node) {
  $default_theme = variable_get('theme_default','');
  $email_theme = variable_get('email_newsletter_theme', 'cuemail');
  if (node_access('update', $node)) {
    return $node->type == 'newsletter' ? $email_theme : $default_theme;
  }
  else {
    return $default_theme;
  }

}

/**
* Implements hook_custom_theme().
*/
function mymodule_custom_theme() {
  if ((arg(0) == 'node') && (arg(2) == 'email') && (user_access('edit any newsletter content'))) {
    //return 'emailnewsletter';
  }
}

/**
 * Implements hook_page_alter().
 * Add newsletter css
 */
function cu_newsletter_page_alter(&$page) {
  drupal_add_css(drupal_get_path('module', 'cu_newsletter') . '/css/cu-newsletter.css');
}

/**
 * Implements module_preprocess_page().
 */
function cu_newsletter_preprocess_page(&$vars) {
  if(isset($vars['node']) && $vars['node']->type == "newsletter") {
    if ((arg(0) == 'node') && (arg(2) != 'email')) {
      if (user_access('edit any newsletter content')) {
        $vars['tabs']['#primary'][] = array(
          '#theme' => 'menu_local_task',
          '#link' => array(
            'path' => 'node/%/email',
            'title' => t('Email Version'),
            'load_functions' => array(
              'node_load',
            ),
            'access_callback' => 'user_access',
            'access_arguments' => array('edit any newsletter content'),
            'tab_root' => 'node/%',
            'tab_parent' => 'node/%',
            'href' => 'node/' . $vars['node']->nid . '/email',

          ),
        );
      }

      $newsletter_name = $vars['node']->field_newsletter_type[LANGUAGE_NONE][0]['taxonomy_term']->name;
      $newsletter_logo = $vars['node']->field_newsletter_type[LANGUAGE_NONE][0]['taxonomy_term']->field_newsletter_name_image;
      $newsletter_node_title = $vars['node']->title;
      $newsletter_title = $newsletter_name . ' - ' . $newsletter_node_title;
      //drupal_set_title($newsletter_title);
    }
  }
}

/**
 * Implements module_preprocess_node().
 */
function cu_newsletter_preprocess_node(&$vars) {

  if ($vars['type'] == 'newsletter' && $vars['view_mode'] == 'full') {
    if ((arg(0) == 'node') && (arg(2) == 'email')) {
      $vars['newsletter_name'] = $vars['field_newsletter_type'][0]['taxonomy_term']->name;
      // Get newsletter design
      $vars['design'] = $vars['field_newsletter_type'][0]['taxonomy_term']->field_newsletter_design[LANGUAGE_NONE][0]['value'];
      // Add newsletter image
      if (!empty($vars['field_newsletter_type'][0]['taxonomy_term']->field_newsletter_name_image)) {
        $newsletter_logo_uri = $vars['field_newsletter_type'][0]['taxonomy_term']->field_newsletter_name_image[LANGUAGE_NONE][0]['uri'];
        $vars['newsletter_logo_url'] = image_style_url('small', $newsletter_logo_uri);
      }
      // Add newsletter footer
      if (!empty($vars['field_newsletter_type'][0]['taxonomy_term']->field_newsletter_footer)) {
        $vars['content']['field_newsletter_footer'] = $vars['field_newsletter_type'][0]['taxonomy_term']->field_newsletter_footer[LANGUAGE_NONE][0]['value'];
      }
      // Add teaser for email intro
      $newsletter_node = node_load($vars['node']->nid);
      $newsletter = node_view($newsletter_node, 'teaser');
      $vars['content']['teaser'] = $newsletter['body'];
    }
    else {
      if (!empty($vars['content']['field_newsletter_ad_promo']) || !empty($vars['content']['field_newsletter_text_block'])) {
        $vars['column_classes'] = array(
          'main' => 'col-lg-8 col-md-8 col-sm-12 col-xs-12',
          'sidebar' => 'col-lg-4 col-md-4 col-sm-12 col-xs-12',
        );
      }
      else {
        $vars['column_classes'] = array(
          'main' => 'col-lg-12 col-md-12 col-sm-12 col-xs-12',
        );
      }
      $vars['column_classes'] = array(
        'main' => 'col-lg-12 col-md-12 col-sm-12 col-xs-12',
        'sidebar' => 'col-lg-12 col-md-12 col-sm-12 col-xs-12',
      );
    }

    // Get sections and attached articles
    $articles = array();
    $sections = array_intersect_key($vars['elements']['field_newsletter_section'], element_children($vars['elements']['field_newsletter_section']));
    foreach ($sections as $section) {
      $section_item = $section['entity']['field_collection_item'];
      $section_item = current($section_item);
      foreach ($section_item['field_newsletter_articles']['#items'] as $reference) {
        $nid = $reference['target_id'];
        $articles[$nid] = $nid;
      }
    }
    // Get node titles
    if (!empty($articles)) {
      $query = db_select('node', 'n')
      ->fields('n', array('nid', 'title'))
      ->condition('n.nid', $articles, 'IN');
      $nodes = $query->execute()->fetchAll();
      $titles = array();
      foreach ($nodes as $node) {
        $titles[] = $node->title;
      }
      $attached_articles = array(
        '#theme' => 'item_list',
        '#items' => $titles,
        '#type' => 'ul',
        '#attributes' => array('class' => 'title-list'),
      );
      $vars['attached_articles'] = render($attached_articles);
    }
  }
}


/**
 * Implements module_preprocess_hook().
 * Build article sections.
 */
function cu_newsletter_preprocess_entity(&$vars) {

  $entity_type = $vars['elements']['#entity_type'];
  $bundle = $vars['elements']['#bundle'];
  // Only process newsletter sections
  if ($entity_type == 'field_collection_item' && $bundle == 'field_newsletter_section') {
    $view_mode = $vars['content']['field_newsletter_display'][0]['#markup'];
    $nids = array();
    foreach ($vars['content']['field_newsletter_articles']['#items'] as $key => $value) {
      $nids[$key] = $value['target_id'];
    }
    $nodes = node_load_multiple($nids);
    $vars['content']['articles'] = node_view_multiple($nodes, $view_mode);
    $vars['content']['articles']['#weight'] = 1;
    $article_count = count($vars['content']['field_newsletter_articles']['#items']);
    $article_column_class = $article_count > 1 ? 'col-lg-6 col-md-6 col-sm-6 col-xs-12' : 'col-lg-12 col-md-12 col-sm-12 col-xs-12';
    $count = 0;
    foreach ($vars['content']['articles']['nodes'] as $nid => $node) {
      if (is_array($node)) {
        $zebra = ($count++%2==1) ? 'odd' : 'even';
        $vars['content']['articles']['nodes'][$nid]['zebra'] = $zebra;
        $vars['content']['articles']['nodes'][$nid]['#column_class'] = $article_column_class;
      }
    }
    // Add last class to node array
    $articles = $vars['content']['articles']['nodes'];
    unset($articles['#sorted']);
    end($articles);         // move the internal pointer to the end of the array

    $key = key($articles);
    $vars['content']['articles']['nodes'][$key]['#order_class'] = 'last';
    unset($vars['content']['field_newsletter_display']);
    unset($vars['content']['field_newsletter_articles']);
  }
}

/**
 * Implements hook_theme().
 */

function cu_newsletter_theme(&$existing, $type, $theme, $path) {
  $registry = array();
  $template_dir = drupal_get_path('module', 'cu_newsletter') . '/templates';
  $registry['cu_newsletter_block'] = array(
    'template' => 'cu-newsletter-block',
    'path' => $template_dir,
  );
  return $registry;
}

/**
 * Implements hook_theme_registry_alter().
 */
function cu_newsletter_theme_registry_alter(&$theme_registry) {
  $module_path = drupal_get_path('module', 'cu_newsletter');
  $theme_registry_copy = $theme_registry;
  _theme_process_registry($theme_registry_copy, 'phptemplate', 'theme_engine', 'field_collection', $module_path);
  $theme_registry += array_diff_key($theme_registry_copy, $theme_registry);
  $hooks = array('node');
  foreach ($hooks as $h) {
    if (isset($theme_registry[$h]['theme paths'])) {
      $first_element = array_shift($theme_registry[$h]['theme paths']);
      array_unshift($theme_registry[$h]['theme paths'], array_shift($theme_registry[$h]['theme paths']), $module_path);
    }
  }
}

/**
 * Implements hook_image_default_styles().
 */

function cu_newsletter_image_default_styles() {
  $styles = array();

  $styles['email_feature_thumbnail'] = array(
    'name' => 'email_feature_thumbnail',
    'label' => 'email_feature_thumbnail',
    'effects' => array(
      10 => array(
        'label' => 'Focal Point Scale And Crop',
        'help' => 'Scale and crop based on data provided by <em>Focal Point</em>.',
        'effect callback' => 'focal_point_scale_and_crop_effect',
        'dimensions callback' => 'image_resize_dimensions',
        'form callback' => 'image_resize_form',
        'summary theme' => 'image_resize_summary',
        'module' => 'focal_point',
        'name' => 'focal_point_scale_and_crop',
        'data' => array(
          'width' => 580,
          'height' => 270,
          'upscale' => 1,
        ),
        'weight' => 2,
      ),
    ),
  );

  $styles['email_feature_thumbnail_large'] = array(
    'name' => 'email_feature_thumbnail_large',
    'label' => 'email_feature_thumbnail_large',
    'effects' => array(
      10 => array(
        'label' => 'Focal Point Scale And Crop',
        'help' => 'Scale and crop based on data provided by <em>Focal Point</em>.',
        'effect callback' => 'focal_point_scale_and_crop_effect',
        'dimensions callback' => 'image_resize_dimensions',
        'form callback' => 'image_resize_form',
        'summary theme' => 'image_resize_summary',
        'module' => 'focal_point',
        'name' => 'focal_point_scale_and_crop',
        'data' => array(
          'width' => 1200,
          'height' => 600,
          'upscale' => 1,
        ),
        'weight' => 2,
      ),
    ),
  );

  $styles['email_teaser_thumbnail'] = array(
    'name' => 'email_teaser_thumbnail',
    'label' => 'email_teaser_thumbnail',
    'effects' => array(
      10 => array(
        'label' => 'Focal Point Scale And Crop',
        'help' => 'Scale and crop based on data provided by <em>Focal Point</em>.',
        'effect callback' => 'focal_point_scale_and_crop_effect',
        'dimensions callback' => 'image_resize_dimensions',
        'form callback' => 'image_resize_form',
        'summary theme' => 'image_resize_summary',
        'module' => 'focal_point',
        'name' => 'focal_point_scale_and_crop',
        'data' => array(
          'width' => 160,
          'height' => 160,
          'upscale' => 1,
        ),
        'weight' => 2,
      ),
    ),
  );

  $styles['email_ad'] = array(
    'name' => 'email_ad',
    'label' => 'email_ad',
    'effects' => array(
      10 => array(
        'name' => 'image_scale_and_crop',
        'data' => array(
          'width' => 580,
          'height' => 290,
        ),
        'weight' => 2,
      ),
    ),
  );
  $styles['email_ad_large'] = array(
    'name' => 'email_ad_large',
    'label' => 'email_ad_large',
    'effects' => array(
      10 => array(
        'name' => 'image_scale_and_crop',
        'data' => array(
          'width' => 600,
          'height' => 300,
        ),
        'weight' => 2,
      ),
    ),
  );

  // Exported image style: email_large.
  $styles['email_large'] = array(
    'label' => 'email_large',
    'effects' => array(
      1 => array(
        'name' => 'image_scale',
        'data' => array(
          'width' => 1200,
          'height' => '',
          'upscale' => 1,
        ),
        'weight' => 1,
      ),
    ),
  );

  // Exported image style: email_medium.
  $styles['email_medium'] = array(
    'label' => 'email_medium',
    'effects' => array(
      2 => array(
        'name' => 'image_scale',
        'data' => array(
          'width' => 580,
          'height' => '',
          'upscale' => 1,
        ),
        'weight' => 1,
      ),
    ),
  );

  return $styles;
}

/**
 * Implements hook_node_update().
 * Publish all referenced nodes.
 */
function cu_newsletter_node_insert($node) {
  _cu_newsletter_publish_nodes($node);
}

/**
 * Implements hook_node_update().
 * Publish all referenced nodes.
 */
function cu_newsletter_node_update($node) {
  _cu_newsletter_publish_nodes($node);
}

/**
 * Publish all referenced nodes.
 */
function _cu_newsletter_publish_nodes($node) {
  if (($node->type == 'newsletter') && ($node->status == 1)) {
    $status = $node->status;
    $nids = array();
    foreach ($node->field_newsletter_section[LANGUAGE_NONE] as $item) {
      $item = entity_load('field_collection_item', array($item['value']));
      $item = current($item);
      foreach ($item->field_newsletter_articles[LANGUAGE_NONE] as $article) {
        $nids[] = $article['target_id'];
      }
    }
    foreach ($nids as $nid) {
      $node_reference = node_load($nid);
      if ($node_reference->status == 0) {
        $node_reference->status = 1;
        node_save($node_reference);
        $message = t('%title is now published',
          array(
            '%title' => $node_reference->title,
          )
        );
        drupal_set_message($message);
      }
    }
  }
}
/**
 * Allowed values function for field_newsletter_display.
 */
function _cu_newsletter_display_values() {
  return array(
    'email_teaser' => 'Teaser',
    'email_feature' => 'Feature',
  );
}

/**
 * Implements hook_permission().
 *
 * Add permission for adding a newsletter logo/flag
 */

function cu_newsletter_permission() {
  return array(
    'add newsletter logo' => array(
      'title' => 'Add Newsletter Logo',
      'description' => 'Add a graphic title to the newsletter in place of text.',
    ),
  );
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * Set newsletter image field access to false if user doesn't have permission.
 */
function cu_newsletter_form_taxonomy_form_term_alter(&$form, &$form_state, $form_id) {
  if ($form['vocabulary_machine_name']['#value'] == 'newsletter') {
    if (!user_access('add newsletter logo')) {
      $form['field_newsletter_name_image']['#access'] = FALSE;
    }
    $form['#validate'][] = 'cu_newsletter_path_validate';
    // Hide Description field
    $form['description']['#access'] = FALSE;
  }
}
/**
 * Validation function to make sure that newsletters do not share the same path.
 */
function cu_newsletter_path_validate(&$form, &$form_state) {
  $path = $form_state['values']['field_newsletter_path'][LANGUAGE_NONE][0]['value'];
  $tid = $form_state['values']['tid'];
  // Make sure entered value is converted to be path friendly
  if (module_exists('pathauto')) {
    module_load_include('inc', 'pathauto', 'pathauto');
    $path = pathauto_cleanstring($path);
  }

  $query = db_select('field_data_field_newsletter_path', 'path');
  $query->condition('path.field_newsletter_path_value', $path, '=');
  // Make sure the term id assigned to that path is not the term being edited
  $query->condition('path.entity_id', $tid, '!=');
  $results = $query->countQuery()->execute()->fetchField();
  if ($results) {
    form_set_error('field_newsletter_path', t('A newsletter with this path already exists.'));
  }
  $form_state['values']['field_newsletter_path'][LANGUAGE_NONE][0]['value'] = $path;
}

/**
 * Implements hook_secure_permissions().
 *
 * Adding permissions for newsletter
 */
function cu_newsletter_secure_permissions($role) {
  $permissions = array(
    'anonymous user' => array(

    ),
    'authenticated user' => array(

    ),
    'administrator' => array(
      'create newsletter content',
      'delete any newsletter content',
      'delete own newsletter content',
      'edit any newsletter content',
      'edit own newsletter content',
      'administer newsletter terms',
    ),
    'content_editor' => array(
      'create newsletter content',
      'delete any newsletter content',
      'delete own newsletter content',
      'edit any newsletter content',
      'edit own newsletter content',
      'administer newsletter terms',
    ),
    'developer' => array(
      'add newsletter logo',
      'create newsletter content',
      'delete any newsletter content',
      'delete own newsletter content',
      'edit any newsletter content',
      'edit own newsletter content',
      'administer newsletter terms',
    ),
    'site_owner' => array(
      'create newsletter content',
      'delete any newsletter content',
      'delete own newsletter content',
      'edit any newsletter content',
      'edit own newsletter content',
      'administer newsletter terms',
    ),
  );

  if (isset($permissions[$role])) {
    return $permissions[$role];
  }
}

function cu_newsletter_design_options() {
  $options = array(
    'design-01' => 'Classic',
    'design-02' => 'Minimal',
    'design-03' => 'Design 3',
    'design-04' => 'Design 4',
  );
  return $options;
}
